#!/usr/bin/env python

"""

small cli tool to download either audio from a video or the full video
(so basically a wrapper for the pafy pip-package)

pafy-doc: https://pythonhosted.org/Pafy/
note: pafy needs youtube-dl pip-package to be installed

put into /usr/local/bin/ and use chmod +x <filename> to make it accessible.
accessibility: whole system, for all users

usage: check -h/--help arg

"""


import pafy
import sys
import os


def check_existing_python() -> bool:
    pass


def check_input_path() -> bool:
    pass


def check_file_exists() -> bool:
    pass


def get_dwnld_path() -> str:
    if path_given():
        #TODO
        return "<PATH>"
    return get_default_path()


def get_default_path() -> str:
    """Returns the default downloads path for linux or windows"""
    if os.name == "nt":
        """     TODO    TODO    TODO
        #import winreg
        sub_key = r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders"
        downloads_guid = '{374DE290-123F-4565-9164-39C4925E467B}'
        with winreg.OpenKey(winreg.HKEY_CURRENT_USER, sub_key) as key:
            location = winreg.QueryValueEx(key, downloads_guid)[0]
        return location
        """
        return ""
    else:
        return os.path.join(os.path.expanduser("~"), "Downloads")


def audio_only_given() -> bool:
    return "-a" in sys.argv


def video_only_given() -> bool:
    return "-v" in sys.argv

def path_given() -> bool:
    return "-p" in sys.argv


def show_progress(total, recvd, ratio, rate, eta):
    """
        callback function for download progress
        should show percentage and progress-bar
    """
    bar_length = 32
    hashes = "#" * round(ratio * bar_length)
    spaces = " " * (bar_length - len(hashes))
    progress_percent = round(round(ratio, 4) * 100, 2)
    sys.stdout.write(f"\rProgress: [ {hashes}{spaces} ] {progress_percent}%")
    sys.stdout.flush()


def get_quality_of_streams_string(s: list) -> str:
    """
        returns the quality of a list of streams given by pafy
        decides on what the 'quality' is based on if audio-only-flag was given

        for audio quality is 'bitrate'
        else quality is 'p'
    """
    if audio_only_given():
        # concatinate every bitrate value and beautify
        return "".join([f"{i}: bitrate={str(st.bitrate)} (.{st.extension})\n" for i, st in enumerate(s, start=1)])
    else:
        # concatinate every quality number (b of resolution = a x b) and beautify
        return "".join([f"{i}: {str(st.quality).split('x')[1]}p (.{st.extension})\n" for i, st in enumerate(s, start=1)])


if __name__ == "__main__":

    # test link = "https://www.youtube.com/watch?v=enYdAxVcNZA"
    # test dir  = /home/<usr>/Downloads/    
    
    #TODO read from args
    url = "https://www.youtube.com/watch?v=enYdAxVcNZA"
    pafy_vid = pafy.new(url)

    # pafy can only get 'normal','video' or 'audio' streams
    # normal = video+audio
    # audio = audio only
    # video = video only
    stream_type = "audio" if audio_only_given() else "video" if video_only_given() else "normal"

    dl_options = [o for o in pafy_vid.allstreams if o.mediatype == stream_type]
    dl_options_quality_string = get_quality_of_streams_string(dl_options)
    print(f"The following qualities could be found for your selection ('{stream_type}'):\n{dl_options_quality_string}")

    selected_dl_index_str = input("Select the quality you want to download: ")

    # validate that entry was digit
    if(not selected_dl_index_str.isdigit()):
        print("\nERROR: An invalid selection was made.\n\tClosing...")
        os._exit(-1)

    selected_dl_index = int(selected_dl_index_str) - 1

    # validate that digit is in array-range
    if(selected_dl_index not in range(len(dl_options))):
        print("\nERROR: Selection did not exist.\nClosing...\n")
        os._exit(-1)

    dwnld_path = get_dwnld_path()

    print(dwnld_path)
    """
    selected_dl = dl_options[selected_dl_index]
    print()
    selected_dl.download(filepath=dwnld_path, quiet=True, callback=show_progress)
    print()
    dwnlded_size = round(selected_dl.get_filesize() / 1024 / 1024, 2)
    print(f"download-path: {dwnld_path}, dowload-size: {dwnlded_size}MiB")
    """
